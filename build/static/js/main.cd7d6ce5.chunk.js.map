{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","components/Notification.js","services/phonebook.js","App.js","serviceWorker.js","index.js"],"names":["Filter","_ref","value","onChange","react_default","a","createElement","PersonForm","name","number","onNameChange","onNumberChange","onSubmit","type","Persons","persons","onPersonDelete","map","person","key","id","onClick","Notification","message","styles","background","borderRadius","borderStyle","color","success","fontSize","marginBottom","padding","style","baseUrl","phonebook","axios","get","then","response","data","post","put","concat","delete","App","_useState","useState","_useState2","Object","slicedToArray","setPersons","_useState3","_useState4","newName","setNewName","_useState5","_useState6","newNumber","setNewNumber","_useState7","_useState8","filter","setFilter","_useState9","_useState10","notificationMessage","setNotificationMessage","_useState11","_useState12","notificationSuccess","setNotificationSuccess","useEffect","catch","err","setTimeout","personsToShow","toLowerCase","includes","components_Notification","components_Filter","event","target","components_PersonForm","preventDefault","newPerson","existingPerson","find","window","confirm","updatedPerson","p","createdPerson","components_Persons","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cd7d6ce5.chunk.js","sourcesContent":["import React from 'react';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <div>\n      filter shown with <input value={value} onChange={onChange} />\n    </div>\n  );\n};\n\nexport default Filter;\n","import React from 'react';\n\nconst PersonForm = ({\n  name,\n  number,\n  onNameChange,\n  onNumberChange,\n  onSubmit,\n}) => {\n  return (\n    <div>\n      <h2>Add a new</h2>\n      <form onSubmit={onSubmit}>\n        <div>\n          name: <input value={name} onChange={onNameChange} />\n        </div>\n        <div>\n          number: <input value={number} onChange={onNumberChange} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default PersonForm;\n","import React from 'react';\n\nconst Persons = ({ persons, onPersonDelete }) => {\n  return (\n    <div>\n      <h2>Numbers</h2>\n      {persons.map((person) => (\n        <p key={person.id}>\n          {person.name} {person.number}{' '}\n          <button onClick={() => onPersonDelete(person)}>delete</button>\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default Persons;\n","import React from 'react';\n\nconst Notification = ({ message, success }) => {\n  const styles = {\n    background: 'lightgrey',\n    borderRadius: 5,\n    borderStyle: 'solid',\n    color: success ? 'green' : 'red',\n    fontSize: 20,\n    marginBottom: 10,\n    padding: 10,\n  };\n\n  if (!message) return null;\n\n  return <div style={styles}>{message}</div>;\n};\n\nexport default Notification;\n","import axios from 'axios';\nconst baseUrl = '/api/persons';\n\nconst getAll = () => axios.get(baseUrl).then((response) => response.data);\n\nconst create = (person) =>\n  axios.post(baseUrl, person).then((response) => response.data);\n\nconst update = (id, person) =>\n  axios.put(`${baseUrl}/${id}`, person).then((response) => response.data);\n\nconst remove = (id) =>\n  axios.delete(`${baseUrl}/${id}`).then((response) => response.data);\n\nexport default {\n  getAll,\n  create,\n  update,\n  delete: remove,\n};\n","import React, { useState, useEffect } from 'react';\nimport Filter from './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport Persons from './components/Persons';\nimport Notification from './components/Notification';\nimport phonebook from './services/phonebook';\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [filter, setFilter] = useState('');\n  const [notificationMessage, setNotificationMessage] = useState(null);\n  const [notificationSuccess, setNotificationSuccess] = useState(true);\n\n  useEffect(() => {\n    phonebook\n      .getAll()\n      .then(setPersons)\n      .catch((err) => {\n        setNotificationMessage('Could not get numbers');\n        setNotificationSuccess(false);\n      });\n  }, []);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setNotificationMessage(null);\n    }, 3000);\n  }, [notificationMessage]);\n\n  const handleNewNameChange = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const handleNewNumberChange = (event) => {\n    setNewNumber(event.target.value);\n  };\n\n  const handlePersonDelete = (person) => {\n    const willDelete = window.confirm(`Delete ${person.name}?`);\n    if (!willDelete) return;\n\n    phonebook\n      .delete(person.id)\n      .then(() => {\n        setPersons(persons.filter((p) => p.id !== person.id));\n        setNotificationMessage(`Deleted ${person.name}`);\n        setNotificationSuccess(true);\n      })\n      .catch((err) => {\n        setNotificationMessage(`Could not delete ${person.name}`);\n        setNotificationSuccess(false);\n      });\n  };\n\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n\n    const newPerson = {\n      name: newName,\n      number: newNumber,\n    };\n\n    const existingPerson = persons.find((person) => person.name === newName);\n    if (existingPerson) {\n      const willUpdate = window.confirm(\n        `${\n          existingPerson.name\n        } is already added to phonebook. Replace the old number with a new one?`,\n      );\n      if (!willUpdate) return;\n\n      phonebook\n        .update(existingPerson.id, newPerson)\n        .then((updatedPerson) => {\n          setPersons(\n            persons.map((p) => (p.id === updatedPerson.id ? updatedPerson : p)),\n          );\n          setNotificationMessage(`Updated ${updatedPerson.name}`);\n          setNotificationSuccess(true);\n        })\n        .catch((err) => {\n          setNotificationMessage(\n            `Information on ${\n              newPerson.name\n            } has already been removed from server`,\n          );\n          setNotificationSuccess(false);\n        });\n    } else {\n      phonebook\n        .create(newPerson)\n        .then((createdPerson) => {\n          setPersons(persons.concat(createdPerson));\n          setNotificationMessage(`Added ${createdPerson.name}`);\n          setNotificationSuccess(true);\n        })\n        .catch((err) => {\n          setNotificationMessage(`Could not add ${newPerson.name}`);\n          setNotificationSuccess(false);\n        });\n    }\n\n    setNewName('');\n    setNewNumber('');\n  };\n\n  const personsToShow = persons.filter((person) =>\n    person.name.toLowerCase().includes(filter.toLowerCase()),\n  );\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n\n      <Notification\n        message={notificationMessage}\n        success={notificationSuccess}\n      />\n\n      <Filter\n        value={filter}\n        onChange={(event) => setFilter(event.target.value)}\n      />\n      <PersonForm\n        name={newName}\n        number={newNumber}\n        onNameChange={handleNewNameChange}\n        onNumberChange={handleNewNumberChange}\n        onSubmit={handleFormSubmit}\n      />\n      <Persons persons={personsToShow} onPersonDelete={handlePersonDelete} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}